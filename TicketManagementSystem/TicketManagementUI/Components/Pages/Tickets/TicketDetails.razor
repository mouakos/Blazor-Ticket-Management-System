@page "/ticket/details/{ticketId:int}"
@using Domain.DTOs.Requests
@using Infrastructure.Common
@using Microsoft.AspNetCore.Authorization
@using TicketManagementUI.Components.Pages.Tickets.Discussions
@using TicketManagementUI.Extensions.Helpers
@attribute [Authorize]
@rendermode InteractiveServer
<SectionContent SectionName="page-title">Ticket Details</SectionContent>

@inject ITicketService TicketService
@inject IAccountService AccountService
@inject ICriteriaService CriteriaService
@inject IDiscussionService DiscussionService
@inject ISnackbar Snackbar
@inject NavigationManager Nav

<div class="head-panel">
    <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" @onclick="BackToTicketList" Variant="Variant.Filled" Color="Color.Primary">
        <MudText>Back to list</MudText>
    </MudButton>
    <MudButton Disabled="m_IsClosed" StartIcon="@Icons.Material.Filled.CheckCircle" @onclick="CloseTicketAsync" Variant="Variant.Filled" Color="Color.Error">
        <MudText>Close</MudText>
    </MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.CheckCircle" @onclick="DeleteTicketAsync" Variant="Variant.Filled" Color="Color.Error">
        <MudText>Delete</MudText>
    </MudButton>
    <MudMessageBox @ref="m_MudMessageBox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Deleting can <b><i>not</i></b> be undone!
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
        </YesButton>
    </MudMessageBox>
</div>

<SectionContent SectionName="page-title">Ticket ID: @m_Ticket?.TicketIdView</SectionContent>
<div class="container-fluid">
    <div class="row">
        <div class="col-sm-10 mt-3 p-3 discussion-panel">
            <div class="ticket-info">
                <p style="font-size: 25px">@m_Ticket?.Summary</p>

                <table class="mt-2">
                    <tr>
                        <td rowspan="2">
                            <MudImage Src="@Path.Combine("uploads", "avatars", m_Ticket?.RaisedByAvatar ?? Constants.c_DefaultAvatar)"
                                      Width="50" Height="50" Style="border-radius:5px" />
                        </td>
                        <td>
                            <span class="ms-3">
                                <strong>@m_Ticket?.RaisedByName</strong>
                            </span>
                        </td>
                    </tr>
                    <tr>
                        <td>

                            <span class="ms-3">
                                @m_Ticket?.CreatedDate.BeautifyDate()
                            </span>
                        </td>
                    </tr>
                </table>

                <div class="mt-4">
                    @((MarkupString)(m_Ticket?.Description ?? string.Empty))
                </div>

                @if (m_Ticket?.Attachments is { Count: > 0 })
                {
                    <div class="attachment mt-5">
                        <div>
                            <strong>Attachments</strong>
                        </div>
                        <div class="mt-2">
                            <MudGrid>
                                @foreach (var item in m_Ticket.Attachments)
                                {
                                    <MudItem>
                                        <MudButton download="@item.FileName"
                                                   Href="@item.ServerFileName"
                                                   Variant="Variant.Outlined"
                                                   StartIcon="@Icons.Material.Filled.CloudDownload"
                                                   Color="Color.Primary">
                                            @item.FileName
                                        </MudButton>
                                    </MudItem>
                                }
                            </MudGrid>
                        </div>
                    </div>
                }
            </div>
            <hr/>
            <CreateDiscussions TicketId="TicketId" OnNotifyParent="RefreshDiscussionAsync"/>
            <hr/>
            <ViewDiscussions Discussions="@m_Discussions"/>
        </div>
        <div class="col-sm-2 action-panel">
            <MudStack Style="width: 100%" class="mt-5">
                <Alert @ref="m_Alert"/>
                @if (m_Errors.Length > 0)
                {
                    <MudItem>
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">@($"Error found ({m_Errors.Length})")</MudText>

                            @foreach (var error in m_Errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                }
                <MudButton Variant="Variant.Filled"
                           FullWidth="true"
                           EndIcon="@Icons.Material.Filled.Save"
                           Color="Color.Primary"
                           @onclick="UpdateAsync">
                    Update Ticket
                </MudButton>
                <MudTextField T="string" ReadOnly="true" Text="@m_Ticket?.ExpectedDate.BeautifyDate()" Label="Expected Completion Date" Variant="Variant.Outlined"></MudTextField>

                @if (m_IsClosed)
                {
                    <MudTextField T="string" ReadOnly="true" Text="@m_Ticket?.ClosedBy" Label="Closed By" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField T="string" ReadOnly="true" Text="@m_Ticket?.ClosedDate?.BeautifyDate()" Label="Closed Date" Variant="Variant.Outlined"></MudTextField>
                }
                <Select @ref="m_ProductDdl" Elements="@m_Products" Label="Product"></Select>
                <Select @ref="m_CategoryDdl" Elements="@m_Categories" Label="Category"></Select>
                <Select @ref="m_AssignDdl" Elements="@m_Users" Label="Assign"></Select>
                <Select @ref="m_PriorityDdl" Elements="@m_Priorities" Label="Priority"></Select>
                <Select @ref="m_StatusDdl" Elements="@m_Status" Label="Status"></Select>
            </MudStack>
        </div>
    </div>
</div>

@code {
    [Parameter] public int TicketId { get; set; }

    private TicketResponse? m_Ticket;

    Select? m_ProductDdl;
    Select? m_PriorityDdl;
    Select? m_CategoryDdl;
    Select? m_StatusDdl;
    Select? m_AssignDdl;

    private List<SelectItem>? m_Products;
    private List<SelectItem>? m_Priorities;
    private List<SelectItem>? m_Categories;
    private List<SelectItem>? m_Status;
    private List<SelectItem>? m_Users;

    private bool m_IsClosed;
    private Alert? m_Alert;
    private string?[] m_Errors = [];
    private List<DiscussionResponse>? m_Discussions;
    private MudMessageBox? m_MudMessageBox;

    protected override async Task OnInitializedAsync()
    {
        m_Ticket = await TicketService.FindTicketAsync(TicketId);
        await InitializeDropdownAsync();
        m_Discussions = await DiscussionService.GetDiscussionsAsync(TicketId);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AssignTicketValue();
        }
    }

    private void AssignTicketValue()
    {
        if (m_ProductDdl != null) m_ProductDdl.SelectedValue = m_Ticket?.ProductId.ToString();
        if (m_PriorityDdl != null) m_PriorityDdl.SelectedValue = m_Ticket?.PriorityId.ToString();
        if (m_CategoryDdl != null) m_CategoryDdl.SelectedValue = m_Ticket?.CategoryId.ToString();
        if (m_StatusDdl != null) m_StatusDdl.SelectedValue = m_Ticket?.Status;

        if (m_Ticket != null && m_Ticket.ExpectedDate < DateTime.Now && m_Ticket.Status != Constants.c_StatusClosed)
        {
            m_Alert?.ShowFailed("This ticket is overdue!");
        }

        if (m_Ticket?.AssignedToId != null)
        {
            if (m_AssignDdl != null) m_AssignDdl.SelectedValue = m_Ticket.AssignedToId;
        }

        if (m_Ticket?.Status == Constants.c_StatusClosed)
            m_IsClosed = true;

        StateHasChanged();
    }

    private async Task InitializeDropdownAsync()
    {
        m_Products = (await CriteriaService.GetProductsAsync())
            .Select(x => new SelectItem { Value = x.Id.ToString(), Text = x.Name })
            .ToList();


        m_Priorities = (await CriteriaService.GetPrioritiesAsync())
            .Select(x => new SelectItem { Value = x.Id.ToString(), Text = x.Name })
            .ToList();

        m_Categories = (await CriteriaService.GetCategoriesAsync())
            .Select(x => new SelectItem { Value = x.Id.ToString(), Text = x.Name })
            .ToList();


        m_Status = (await CriteriaService.GetStatusAsync()).Select(x => new SelectItem { Value = x, Text = x }).ToList();

        m_Users = (await AccountService.GetUsersAsync()).Select(x => new SelectItem { Value = x.Id, Text = x.Email }).ToList();
    }

    private void BackToTicketList()
    {
        Nav.NavigateTo("/ticket");
    }

    private async Task CloseTicketAsync()
    {
        if (m_StatusDdl != null) m_StatusDdl.SelectedValue = Constants.c_StatusClosed;
        await UpdateAsync();
    }

    private async Task UpdateAsync()
    {
        if (m_Ticket != null)
        {
            var request = new UpdateTicketRequest
            {
                TicketId = m_Ticket.TicketId,
                ProductId = m_ProductDdl?.SelectedValue?.ToNullableInteger(),
                CategoryId = m_CategoryDdl?.SelectedValue?.ToNullableInteger(),
                PriorityId = m_PriorityDdl?.SelectedValue?.ToNullableInteger(),
                AssignedToId = m_AssignDdl?.SelectedValue,
                Status = m_StatusDdl?.SelectedValue
            };

            var validationHelper = new ValidationHelpers(request);
            var isValid = validationHelper.Validate();
            m_Errors = validationHelper.ValidationResults.Select(x => x.ErrorMessage).ToArray();

            if (isValid)
            {
                var result = await TicketService.UpdateTicketAsync(request);
                if (result.IsSuccess)
                {
                    m_Alert?.ShowSuccess("Successfully update the ticket!");
                    m_Ticket = await TicketService.FindTicketAsync(TicketId);
                    AssignTicketValue();
                }
                else
                {
                    m_Alert?.ShowFailed(result.ErrorMessage);
                }
            }
        }
    }

    private async Task RefreshDiscussionAsync()
    {
        m_Discussions = await DiscussionService.GetDiscussionsAsync(TicketId);
        StateHasChanged();
    }

    private async Task DeleteTicketAsync()
    {
        if (m_MudMessageBox is null) return;
        var result = await m_MudMessageBox.ShowAsync();
        if (result is true)
        {
            var response = await TicketService.DeleteTicketAsync(TicketId);
            if (response.IsSuccess)
            {
                Snackbar.Add("Delete ticket Success!", Severity.Success);
                BackToTicketList();
            }
            else
            {
                Snackbar.Add(response.ErrorMessage, Severity.Error);
            }
        }
        StateHasChanged();
    }

}