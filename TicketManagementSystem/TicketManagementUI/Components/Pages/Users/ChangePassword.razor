@page "/changepassword"
@using Domain.DTOs.Requests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@attribute [Authorize]

@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IAccountService AccountService

@rendermode InteractiveServer

<SectionContent SectionName="page-title">Change Password</SectionContent>

<MudGrid Class="mt-3 align-items-center"  Justify="Justify.Center">
    
    <EditForm Model="@m_ChangePasswordRequest" FormName="ChangePassword" OnValidSubmit="OnChangePassword">
        <DataAnnotationsValidator/>
    <MudCard width="500px">
        <MudCardContent>
            <Alert @ref="m_Alert"/>
            <MudTextField T="string" Label="Current Password" Variant="Variant.Outlined" @bind-Value="m_ChangePasswordRequest.CurrentPassword" Required="true"
                          InputType="InputType.Password" />
                <ValidationMessage For="() => m_ChangePasswordRequest.CurrentPassword" />
            <MudTextField Class="mt-3" T="string" Variant="Variant.Outlined"  Label="New Password" @bind-Value="m_ChangePasswordRequest.NewPassword" 
                          InputType="@m_PasswordInput" Required="true" Adornment="Adornment.End" AdornmentIcon="@m_PasswordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"/>
                <ValidationMessage For="() => m_ChangePasswordRequest.NewPassword" />
            <MudTextField Class="mt-3" T="string" Variant="Variant.Outlined" 
                          Label="Confirm New Password" @bind-Value="m_ChangePasswordRequest.ConfirmNewPassword"
                          InputType="@m_PasswordInput" Required="true" Adornment="Adornment.End" AdornmentIcon="@m_PasswordInputIcon"
                          OnAdornmentClick="TogglePasswordVisibility"/>
                <ValidationMessage For="() => m_ChangePasswordRequest.ConfirmNewPassword" />
            <MudButton Class="mt-3" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Change Password</MudButton>
        </MudCardContent>
    </MudCard>
    </EditForm>
</MudGrid>


@code {
    private Alert? m_Alert;
    private readonly ChangePasswordRequest m_ChangePasswordRequest = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isAccountConfirmed = await ProtectedSessionStorage.GetAsync<bool>("accountconfirmed");
            if (!isAccountConfirmed.Value)
            {
                m_Alert?.ShowFailed("Please change your password upon your first login for security reasons.");
            }
        }
    }

    private async Task OnChangePassword()
    {
        var result = await AccountService.ChangePasswordAsync(m_ChangePasswordRequest);
        if (result.IsSuccess)
        {
            m_Alert?.ShowSuccess("Password has been successfully changed!");
            await ProtectedSessionStorage.DeleteAsync("accountconfirmed");
        }
        else
        {
            m_Alert?.ShowFailed(result.ErrorMessage);
        }
    }

    private InputType m_PasswordInput = InputType.Password;
    private string m_PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (m_PasswordInput == InputType.Text)
        {
            m_PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            m_PasswordInput = InputType.Password;
        }
        else
        {
            m_PasswordInputIcon = Icons.Material.Filled.Visibility;
            m_PasswordInput = InputType.Text;
        }
    }

}