@page "/changepassword"
@attribute [Authorize]

@using Domain.DTOs.Requests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TicketManagementUI.Extensions.Helpers

@inject ProtectedSessionStorage ProtectedSessionStorage
@inject IAccountService AccountService

@rendermode InteractiveServer

<SectionContent SectionName="page-title">Change Password</SectionContent>

<MudGrid Class="mt-5" Justify="Justify.Center" AlignItems="AlignItems.Center">
    <MudCard Width="500px">
        <MudCardContent>
            <Alert @ref="m_Alert" />
            @if (m_Errors.Length > 0)
            {
                <MudItem>
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@($"Error found ({m_Errors.Length})")</MudText>
                        @foreach (var error in m_Errors)
                        {
                            <MudText Color="@Color.Error">@error</MudText>
                        }
                    </MudPaper>
                </MudItem>
            }

            <MudTextField T="string" Label="Current Password" @ref="m_CurrPassword"
                          InputType="InputType.Password" />

            <MudTextField Class="mt-5" T="string" Label="New Password" @ref="m_NewPassword"
                          InputType="InputType.Password" />

            <MudTextField Class="mt-5" T="string"
                          Label="Confirm New Password" InputType="InputType.Password" @ref="m_ConfirmNewPassword" />

            <MudButton Class="mt-5" Color="Color.Primary" Variant="Variant.Filled" OnClick="OnChangePassword">Change Password</MudButton>
        </MudCardContent>
    </MudCard>
</MudGrid>


@code {
    private Alert? m_Alert;

    string?[] m_Errors = [];
    MudTextField<string>? m_CurrPassword;
    MudTextField<string>? m_NewPassword;
    MudTextField<string>? m_ConfirmNewPassword;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isAccountConfirmed = await ProtectedSessionStorage.GetAsync<bool>("accountconfirmed");
            if (!isAccountConfirmed.Value)
            {
                m_Alert?.ShowFailed("Please change your password upon your first login for security reasons.");
            }
        }
    }

    private async Task OnChangePassword()
    {
        if (m_NewPassword?.Text != m_ConfirmNewPassword?.Text)
        {
            m_Alert?.ShowFailed("Password don't match!");
            return;
        }

        var request = new ChangePasswordRequest
            {
                CurrentPassword = m_CurrPassword?.Text,
                NewPassword = m_NewPassword?.Text,
                ConfirmNewPassword = m_ConfirmNewPassword?.Text
            };

        var validationHelper = new ValidationHelpers(request);
        var isValid = validationHelper.Validate();
        m_Errors = validationHelper.ValidationResults.Select(x => x.ErrorMessage).ToArray();

        if (isValid)
        {
            var result = await AccountService.ChangePasswordAsync(request);
            if (result.IsSuccess)
            {
                m_Alert?.ShowSuccess("Password has been successfully changed!");
                await ProtectedSessionStorage.DeleteAsync("accountconfirmed");
            }
            else
            {
                m_Alert?.ShowFailed(result.ErrorMessage);
            }
        }
    }
}