@page "/login"
@using System.ComponentModel.DataAnnotations
@using Domain.Entities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@layout EmptyLayout
@inject SignInManager<User> SignInManager
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject EncryptionHelper<LoginDto> Encryption
@inject ProtectedSessionStorage ProtectedSessionStorage

@rendermode InteractiveServer

 <section class="vh-100">
     <div class="container-fluid h-custom">
         <div class="row d-flex justify-content-center align-items-center h-100">
             <div class="col-md-9 col-lg-6 col-xl-5">
                 <img src="assets/imgs/login-img.jpg" class="img-fluid" alt="login-image"/>
             </div>
             <div class="col-md-8 col-lg-6 col-xl-4 offset-xl-1">
                 <div class="d-flex flex-row align-items-center justify-content-center justify-content-lg-start">
                     <p class="lead fw-normal mb-0 me-3">Sign in with Email</p>
                 </div>
                 <Alert @ref="m_Alert"/>
                   <EditForm Model="@m_Input" method="post" FormName="Login" OnValidSubmit="HandleValidSubmit">
                     <DataAnnotationsValidator/>
                     <hr/>
                     <MudTextField Label="Email" Class="mt-3" Variant="Variant.Outlined"  Required="true"
                                   @bind-Value="m_Input.Email" />
                     <ValidationMessage For="() => m_Input.Email"/>
                     <MudTextField Label="Password" Variant="Variant.Outlined" 
                                   @bind-Value="m_Input.Password" InputType="@m_PasswordInput" Required="true" Adornment="Adornment.End" AdornmentIcon="@m_PasswordInputIcon"
                                   OnAdornmentClick="TogglePasswordVisibility" Class="mt-3" />
                     <ValidationMessage For="() => m_Input.Email"/>
                     <MudCheckBox @bind-Value="m_Input.Remember" Label="Remember my login on this computer" Dense="true" Class="mt-3" />
                     <MudText Class="mt-3">Not a member? To request an account, please contact your administrators.</MudText>
                     <MudButton Class="mt-3 w-100" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
                 </EditForm>
             </div>
         </div>
     </div>
 </section>

@code {

    private Alert? m_Alert;
    private readonly LoginInput m_Input = new();

    private async Task HandleValidSubmit()
    {
        // Hier die Login-Logik implementieren
        var verify = await AccountService.VerifyUserAsync(m_Input.Email!, m_Input.Password!);
        if (!verify.IsSuccess)
        {
            m_Alert?.ShowFailed(verify.ErrorMessage);
            return;
        }

        var loginData = new LoginDto { UserName = verify.Value, Password = m_Input.Password, RememberMe = m_Input.Remember };
        if (verify.Value != null)
        {
            var user = await SignInManager.UserManager.FindByEmailAsync(verify.Value);
            if (user != null)
            {
                if (user.Avatar != null) await ProtectedSessionStorage.SetAsync("avatar", user.Avatar);
                if (user.Email != null) await ProtectedSessionStorage.SetAsync("email", user.Email);
                await ProtectedSessionStorage.SetAsync("accountconfirmed", user.AccountConfirmed);
            }
        }
        var payload = Encryption.Encode(loginData);
        NavigationManager.NavigateTo($"processor/{payload}");
    }

    private class LoginInput
    {
        [Required] [EmailAddress] public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }

        public bool Remember { get; set; }
    }

    private InputType m_PasswordInput = InputType.Password;
    private string m_PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (m_PasswordInput == InputType.Text)
        {
            m_PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            m_PasswordInput = InputType.Password;
        }
        else
        {
            m_PasswordInputIcon = Icons.Material.Filled.Visibility;
            m_PasswordInput = InputType.Text;
        }
    }

}