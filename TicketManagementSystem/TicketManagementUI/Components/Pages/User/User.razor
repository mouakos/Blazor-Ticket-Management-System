@page "/user"
@using Infrastructure.Common
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize(Roles = Constants.c_RoleAdmin)]

@inject IDialogService DialogService
@inject IJSRuntime JsRuntime
@inject ISnackbar SnackBar
@inject IAccountService AccountService

@rendermode InteractiveServer

<SectionContent SectionName="page-title">User Managements</SectionContent>

<style>
    .mud-elevation-1 {
        box-shadow: none !important;
    }
</style>

<MudButton Class="mt-2 ms-2" Color="Color.Primary" Variant="Variant.Filled" OnClick="AddNewUser">Add New User</MudButton>

<MudDataGrid @ref="m_DataGrid"
             SortMode="@SortMode.None"
             T="UserResponse"
             ServerData="ServerReload">
    <Columns>
        <PropertyColumn Property="x => x.Email" />
        <PropertyColumn Property="x => x.Role" />
        <PropertyColumn Property="x => x.AccountConfirmed">
            <CellTemplate>
                @if (context.Item.AccountConfirmed)
                {
                    <span>Yes</span>
                }
                else
                {
                    <span>No</span>
                }
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton Size="@Size.Small" Variant="@Variant.Filled" OnClick="@(() => this.RemoveUser(context))" StartIcon="@Icons.Material.Filled.Delete" Color="@Color.Error">Remove User</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UserResponse" />
    </PagerContent>
</MudDataGrid>

@code {
    MudDataGrid<UserResponse> m_DataGrid;

    private async Task<GridData<UserResponse>> ServerReload(GridState<UserResponse> state)
    {
        var data = AccountService.GetUsers();
        await Task.Delay(300);

        var totalItems = data.Count();

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<UserResponse>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private async Task AddNewUser()
    {
        var options = new DialogOptions
            {
                BackdropClick = false
            };

        var dialog = await DialogService.ShowAsync<UserRegister>("Add New User", options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await m_DataGrid.ReloadServerData();
        }
    }

    private async Task RemoveUser(CellContext<UserResponse> user)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure want to remove this user?");
        if (confirmed)
        {
            var result = await AccountService.RemoveUserAsync(user.Item.Email);
            if (result.IsSuccess)
            {
                SnackBar.Add("Successfully remove user", Severity.Success);
                await m_DataGrid.ReloadServerData();
            }
            else
            {
                SnackBar.Add("Failed remove user: " + result.ErrorMessage, Severity.Error);
            }
        }
    }
}
